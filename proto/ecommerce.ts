/**
 * This file is auto-generated by nestjs-proto-gen-ts
 */

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace ecommerce {
  export interface ErrorResponse {
    message?: string;
    details?: string;
  }
  export interface MetaResponse {
    pagination?: MetaResponse.Pagination;
  }
  export namespace MetaResponse {
    export interface Pagination {
      total?: number;
      page?: number;
      limit?: number;
    }
  }
  // User Management Service
  export interface UserService {
    register(
      data: RegisterRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<RegisterResponse>;
    login(
      data: LoginRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<LoginResponse>;
  }
  export interface RegisterRequest {
    username?: string;
    password?: string;
    role?: string;
  }
  export interface RegisterResponse {
    success?: boolean;
    code?: number;
    data?: RegisterResponse.UserData;
    error?: ecommerce.ErrorResponse;
    meta?: ecommerce.MetaResponse;
  }
  export namespace RegisterResponse {
    export interface UserData {
      userId?: string;
    }
  }
  export interface LoginRequest {
    username?: string;
    password?: string;
  }
  export interface LoginResponse {
    success?: boolean;
    code?: number;
    data?: LoginResponse.LoginData;
    error?: ecommerce.ErrorResponse;
    meta?: ecommerce.MetaResponse;
  }
  export namespace LoginResponse {
    export interface LoginData {
      token?: string;
    }
  }
  // Product Catalog Service
  export interface ProductService {
    addProduct(
      data: AddProductRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<AddProductResponse>;
    getProduct(
      data: GetProductRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<GetProductResponse>;
    getAllProducts(
      data: GetAllProductsRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<GetAllProductsResponse>;
  }
  export interface AddProductRequest {
    name?: string;
    price?: number;
    description?: string;
    stock?: number;
    sellerId?: string;
  }
  export interface AddProductResponse {
    success?: boolean;
    code?: number;
    data?: ecommerce.ProductData;
    error?: ecommerce.ErrorResponse;
    meta?: ecommerce.MetaResponse;
  }
  export interface ProductData {
    productId?: string;
  }
  export interface GetProductRequest {
    productId?: string;
  }
  export interface GetProductResponse {
    success?: boolean;
    code?: number;
    data?: ecommerce.ProductDetails;
    error?: ecommerce.ErrorResponse;
    meta?: ecommerce.MetaResponse;
  }
  export interface ProductDetails {
    name?: string;
    price?: number;
    description?: string;
    stock?: number;
    sellerId?: string;
  }
  export interface GetAllProductsRequest {
    page?: number;
  }
  export interface GetAllProductsResponse {
    success?: boolean;
    code?: number;
    data?: GetAllProductsResponse.Products[];
    error?: ecommerce.ErrorResponse;
    meta?: ecommerce.MetaResponse;
  }
  export namespace GetAllProductsResponse {
    export interface Products {
      productId?: string;
      name?: string;
      price?: number;
      description?: string;
      stock?: number;
      sellerId?: string;
    }
  }
  // Orders and Payments Service
  export interface OrderService {
    createOrder(
      data: CreateOrderRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<CreateOrderResponse>;
  }
  export interface CreateOrderRequest {
    userId?: string;
    productId?: string;
    quantity?: number;
  }
  export interface CreateOrderResponse {
    success?: boolean;
    code?: number;
    data?: CreateOrderResponse.OrderData;
    error?: ecommerce.ErrorResponse;
    meta?: ecommerce.MetaResponse;
  }
  export namespace CreateOrderResponse {
    export interface OrderData {
      orderId?: string;
    }
  }
}
